// Copyright 2022 Bindl Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package command

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	"time"

	"github.com/bindl-dev/bindl/config"
	"github.com/bindl-dev/bindl/internal/version"
)

var rawMakefileTmpl = `# THIS FILE WAS GENERATED BY BINDL {{ .Version }} ON {{ .Time }}
# DO NOT MODIFY - ANY MODIFICATIONS WILL BE OVERWRITTEN

BINDL_PROGRAMS?=$(shell bin/bindl list --oneline)
BINDL_PROGRAMS_PATH?=$(addprefix bin/,$(BINDL_PROGRAMS))

# bindl is an order-only pre-requisite, where lockfile does not necessarily need
# to be regenerated if bindl somehow was built after the lockfile.
{{ .Lockfile }}: | {{ .BinDir }}/bindl
	{{ .BinDir }}/bindl sync

# On the other hand, lockfile is a regular pre-requisite where we would like for
# programs to be re-validated if lockfile was modified, in case the versions have changed.
$(BINDL_PROGRAMS_PATH): {{ .Lockfile }} | {{ .BinDir }}/bindl
	{{ .BinDir }}/bindl get $(@F)
`

var makefileTmpl = template.Must(template.New("makefile").Parse(rawMakefileTmpl))

// GenerateMakefile writes a generated Makefile blindly (overwrites).
func GenerateMakefile(conf *config.Runtime, path string) error {
	f, err := os.OpenFile(path, os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return fmt.Errorf("opening file '%s': %w", path, err)
	}

	m := map[string]string{
		"Version":  version.Summary(),
		"Time":     time.Now().UTC().Format(time.RFC3339),
		"BinDir":   filepath.Base(conf.BinDir),
		"Lockfile": strings.TrimPrefix(conf.LockfilePath, "./"),
	}

	if err := makefileTmpl.Execute(f, m); err != nil {
		return fmt.Errorf("writing makefile: %w", err)
	}

	return nil
}
