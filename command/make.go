package command

import (
	"fmt"
	"os"
	"path/filepath"
	"text/template"

	"go.xargs.dev/bindl/config"
)

var rawMakefileTmpl = "\n{{ .OutputDir }}/{{ .Name }}: {{ .OutputDir }}/bindl\n\t{{ .OutputDir }}/bindl get {{ .Name }}\n"

var makefileTmpl = template.Must(template.New("makefile").Parse(rawMakefileTmpl))

var makefileHeader = `# DO NOT MODIFY - THIS FILE WAS GENERATED BY BINDL
# ANY MODIFICATIONS WILL BE OVERWRITTEN

# If file content is outdated, run 'bindl make' to regenerate.
`

func GenerateMakefile(conf *config.Runtime, path string) error {
	l, err := config.ParseLock(conf.LockfilePath)
	if err != nil {
		return err
	}

	f, err := os.OpenFile(path, os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return fmt.Errorf("opening file '%s': %w", path, err)
	}

	if _, err := f.Write([]byte(makefileHeader)); err != nil {
		return fmt.Errorf("writing makefile header: %w", err)
	}

	m := map[string]string{
		"OutputDir": filepath.Base(conf.OutputDir),
	}

	for _, prog := range l.Programs {
		m["Name"] = prog.PName
		if err := makefileTmpl.Execute(f, m); err != nil {
			return fmt.Errorf("writing template: %w", err)
		}
	}

	return nil
}
